type User
  @model
  @auth(
    rules: [
      { allow: owner }
      { allow: public, operations: [read] }
      { allow: private, operations: [read] }
    ]
  )
  @key(
    name: "userByProviderKey"
    fields: ["providerKey"]
    queryField: "userByProviderKey"
  ) {
  id: ID!
  providerKey: String!
  userNickname: String!
  photoUrl: AWSURL
  email: AWSEmail
  Posts: [Post] @connection(fields: ["id"], keyName: "byUserAndCreatedAt")
}

type Post
  @model
  @auth(
    rules: [
      { allow: owner }
      { allow: public, operations: [read] }
      { allow: private, operations: [read] }
    ]
  )
  @key(name: "byUserAndCreatedAt", fields: ["userId", "createdAt"])
  @key(
    name: "postByCreatedAt"
    fields: ["baseType", "createdAt"]
    queryField: "postByCreatedAt"
  ) {
  id: ID!
  rawContentState: String!
  titlePhoto: String
  title: String!
  subTitle: String
  userId: ID!
  baseType: String!
  createdAt: AWSDateTime!
  tags: [PostTag] @connection(keyName: "byPostByUser", fields: ["id"])
}

type PostTag
  @model
  @auth(
    rules: [
      { allow: owner }
      { allow: public, operations: [read] }
      { allow: private, operations: [read] }
    ]
  )
  @key(name: "byPostByUser", fields: ["postId", "userId"])
  @key(name: "byTagByUser", fields: ["tagId", "userId"]) {
  id: ID!

  userId: ID!
  postId: ID!
  tagId: ID!
  post: Post! @connection(fields: ["postId"])
  tag: Tag! @connection(fields: ["tagId"])
}

type Tag
  @model
  @auth(
    rules: [
      { allow: owner }
      { allow: public, operations: [read] }
      { allow: private, operations: [read] }
    ]
  ) {
  id: ID!
  tagName: String!

  posts: [PostTag] @connection(keyName: "byTagByUser", fields: ["id"])
}
